AWSTemplateFormatVersion: "2010-09-09"
Description: CodePipeline for CloudFormation Root + Nested Stacks Deployment

## Stack Parameters ##
Parameters:
  GitHubRepo:
    Type: String
    Default: todo-Infrastructure
    Description: GitHub repository name (e.g. todo-Infrastructure)
  RootStackName:
    Type: String
    Default: todo-stack
    Description: CloudFormation root stack name
  RootTemplateFile:
    Type: String
    Default: todo-root.yaml
    Description: Root CloudFormation template file name
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
    Description: VPC CIDR
  PublicSubnetCidr1:
    Type: String
    Default: 10.0.1.0/24
    Description: Public subnet CIDR
  PublicSubnetCidr2:
    Type: String
    Default: 10.0.2.0/24
    Description: Public subnet CIDR
  PrivateSubnetCidr1:
    Type: String
    Default: 10.0.3.0/24
    Description: Private subnet CIDR
  PrivateSubnetCidr2:
    Type: String
    Default: 10.0.4.0/24
    Description: Private subnet CIDR
  ConnectionArn:
    Type: String
    Default: arn:aws:codeconnections:ap-south-1:730335183789:connection/e1b46677-0885-4a3c-9df2-5a6caefb6acb
    Description: ARN of CodeStar connection
  CodePipelineBucket:
    Type: String
    Default: codepipeline-us-east-1-f3de767da42b-4a7e-bd92-34e343e25504
    Description: S3 bucket for CodePipeline
  RepositoryUsername:
    Type: String
    Default: Hemal-LPT218
    Description: GitHub username
  BackendRepositoryName:
    Type: String
    Default: todo-backend
    Description: GitHub repository name
  FrontendRepositoryName:
    Type: String
    Default: todo-frontend
    Description: GitHub repository name
  GitHubBranch:
    Type: String
    Default: main
    Description: Branch to use
  InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type for backend
  PORT:
    Type: String
    Default: 3000
    Description: Port number for backend
  DBCredentialsSecret:
    Type: String
    Default: arn:aws:secretsmanager:us-east-1:730335183789:secret:todo-db-credentials-r50p22
    Description: Master password for the database
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: EC2 Key Pair
  AlarmEmail:
    Type: String
    Default: hemal@yopmail.com
    Description: Email address to receive CloudWatch alarms
  NestedStackTemplateBucket:
    Type: String
    Default: cloud-formation-tamplate-for-todo-app
    Description: S3 bucket for nested stack templates
  IsSetupPrivateSubnet:
    Type: String
    Default: "true"
    Description: Db and Api in private subnet
    AllowedValues:
      - "true"
      - "false"
  AppName:
    Type: String
    Default: todo
    Description: Application name used for tagging and naming resources
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - staging
      - prod
    Description: Environment name

## Stack Resources ##
Resources:
  ## Role for CodePipeline ##
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-${Environment}-stack-codepipeline-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
      Policies:
        - PolicyName: !Sub ${AppName}-${Environment}-stack-inline-policy-codestar
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - codestar-connections:UseConnection
                Resource: !Ref ConnectionArn
        - PolicyName: !Sub ${AppName}-${Environment}-stack-inline-policy-s3
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Resource:
                  - !Sub arn:aws:s3:::${CodePipelineBucket}
                  - !Sub arn:aws:s3:::${CodePipelineBucket}/*
                  - !Sub arn:aws:s3:::${NestedStackTemplateBucket}
                  - !Sub arn:aws:s3:::${NestedStackTemplateBucket}/*
        - PolicyName: !Sub ${AppName}-${Environment}-stack-inline-policy-trust-cloudformation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: iam:PassRole
                Resource: !GetAtt CloudFormationDeployRole.Arn
        - PolicyName: !Sub ${AppName}-${Environment}-stack-inline-policy-cloudformation
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:CreateStack
                  - cloudformation:UpdateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeStackEvents
                  - cloudformation:GetTemplate
                  - cloudformation:ValidateTemplate
                Resource: !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${RootStackName}/*
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-${Environment}-stack-codepipeline-role
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  CloudFormationDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AppName}-${Environment}-stack-codedeploy-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        # Allows CloudFormation to create/update/delete stacks
        - arn:aws:iam::aws:policy/AdministratorAccess
      Tags:
        - Key: Name
          Value: !Sub ${AppName}-${Environment}-stack-codedeploy-role
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

  ## Pipeline Resources ##
  CloudFormationPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${AppName}-${Environment}-stack-pipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHub_Source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                ConnectionArn: !Ref ConnectionArn
                FullRepositoryId: !Sub "${RepositoryUsername}/${GitHubRepo}"
                BranchName: !Ref GitHubBranch
              RunOrder: 1

        - Name: Deploy
          Actions:
            - Name: DeployToS3
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: S3
                Version: 1
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                BucketName: !Ref NestedStackTemplateBucket
                Extract: true

            - Name: CloudFormation_Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CloudFormation
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              Configuration:
                ActionMode: CREATE_UPDATE
                StackName: !Ref RootStackName
                Capabilities: CAPABILITY_IAM,CAPABILITY_NAMED_IAM
                TemplatePath: !Sub "SourceOutput::${RootTemplateFile}"
                RoleArn: !GetAtt CloudFormationDeployRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "VpcCidr"                   : "${VpcCidr}",
                    "PublicSubnetCidr1"         : "${PublicSubnetCidr1}",
                    "PublicSubnetCidr2"         : "${PublicSubnetCidr2}",
                    "PrivateSubnetCidr1"        : "${PrivateSubnetCidr1}",
                    "PrivateSubnetCidr2"        : "${PrivateSubnetCidr2}",
                    "ConnectionArn"             : "${ConnectionArn}",
                    "CodePipelineBucket"        : "${CodePipelineBucket}",
                    "RepositoryUsername"        : "${RepositoryUsername}",
                    "BackendRepositoryName"     : "${BackendRepositoryName}",
                    "FrontendRepositoryName"    : "${FrontendRepositoryName}",
                    "GitHubBranch"              : "${GitHubBranch}",
                    "InstanceType"              : "${InstanceType}",
                    "PORT"                      : "${PORT}",
                    "DBCredentialsSecret"       : "${DBCredentialsSecret}",
                    "KeyName"                   : "${KeyName}",
                    "AlarmEmail"                : "${AlarmEmail}",
                    "NestedStackTemplateBucket" : "${NestedStackTemplateBucket}",
                    "IsSetupPrivateSubnet"      : "${IsSetupPrivateSubnet}",
                    "AppName"                   : "${AppName}",
                    "Environment"               : "${Environment}"
                  }
              RunOrder: 2

      Tags:
        - Key: Name
          Value: !Sub ${AppName}-${Environment}-stack-pipeline
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: !Ref AppName

## Stack Outputs ##
Outputs:
  CodePipelineName:
    Description: "CodePipeline Name"
    Value: !Ref CloudFormationPipeline
  CodePipelineURL:
    Description: "CodePipeline URL"
    Value: !Sub "https://${AWS::Region}.console.aws.amazon.com/codesuite/codepipeline/pipelines/${CloudFormationPipeline}/view?region=${AWS::Region}"
